// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/suyuan32/simple-admin-message-center/ent/predicate"
	"github.com/suyuan32/simple-admin-message-center/ent/smsprovider"
)

// SmsProviderUpdate is the builder for updating SmsProvider entities.
type SmsProviderUpdate struct {
	config
	hooks    []Hook
	mutation *SmsProviderMutation
}

// Where appends a list predicates to the SmsProviderUpdate builder.
func (_u *SmsProviderUpdate) Where(ps ...predicate.SmsProvider) *SmsProviderUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SmsProviderUpdate) SetUpdatedAt(v time.Time) *SmsProviderUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetName sets the "name" field.
func (_u *SmsProviderUpdate) SetName(v string) *SmsProviderUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *SmsProviderUpdate) SetNillableName(v *string) *SmsProviderUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetSecretID sets the "secret_id" field.
func (_u *SmsProviderUpdate) SetSecretID(v string) *SmsProviderUpdate {
	_u.mutation.SetSecretID(v)
	return _u
}

// SetNillableSecretID sets the "secret_id" field if the given value is not nil.
func (_u *SmsProviderUpdate) SetNillableSecretID(v *string) *SmsProviderUpdate {
	if v != nil {
		_u.SetSecretID(*v)
	}
	return _u
}

// SetSecretKey sets the "secret_key" field.
func (_u *SmsProviderUpdate) SetSecretKey(v string) *SmsProviderUpdate {
	_u.mutation.SetSecretKey(v)
	return _u
}

// SetNillableSecretKey sets the "secret_key" field if the given value is not nil.
func (_u *SmsProviderUpdate) SetNillableSecretKey(v *string) *SmsProviderUpdate {
	if v != nil {
		_u.SetSecretKey(*v)
	}
	return _u
}

// SetRegion sets the "region" field.
func (_u *SmsProviderUpdate) SetRegion(v string) *SmsProviderUpdate {
	_u.mutation.SetRegion(v)
	return _u
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (_u *SmsProviderUpdate) SetNillableRegion(v *string) *SmsProviderUpdate {
	if v != nil {
		_u.SetRegion(*v)
	}
	return _u
}

// SetIsDefault sets the "is_default" field.
func (_u *SmsProviderUpdate) SetIsDefault(v bool) *SmsProviderUpdate {
	_u.mutation.SetIsDefault(v)
	return _u
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (_u *SmsProviderUpdate) SetNillableIsDefault(v *bool) *SmsProviderUpdate {
	if v != nil {
		_u.SetIsDefault(*v)
	}
	return _u
}

// Mutation returns the SmsProviderMutation object of the builder.
func (_u *SmsProviderUpdate) Mutation() *SmsProviderMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *SmsProviderUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SmsProviderUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *SmsProviderUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SmsProviderUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SmsProviderUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := smsprovider.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *SmsProviderUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(smsprovider.Table, smsprovider.Columns, sqlgraph.NewFieldSpec(smsprovider.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(smsprovider.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(smsprovider.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.SecretID(); ok {
		_spec.SetField(smsprovider.FieldSecretID, field.TypeString, value)
	}
	if value, ok := _u.mutation.SecretKey(); ok {
		_spec.SetField(smsprovider.FieldSecretKey, field.TypeString, value)
	}
	if value, ok := _u.mutation.Region(); ok {
		_spec.SetField(smsprovider.FieldRegion, field.TypeString, value)
	}
	if value, ok := _u.mutation.IsDefault(); ok {
		_spec.SetField(smsprovider.FieldIsDefault, field.TypeBool, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{smsprovider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// SmsProviderUpdateOne is the builder for updating a single SmsProvider entity.
type SmsProviderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SmsProviderMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SmsProviderUpdateOne) SetUpdatedAt(v time.Time) *SmsProviderUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetName sets the "name" field.
func (_u *SmsProviderUpdateOne) SetName(v string) *SmsProviderUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *SmsProviderUpdateOne) SetNillableName(v *string) *SmsProviderUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetSecretID sets the "secret_id" field.
func (_u *SmsProviderUpdateOne) SetSecretID(v string) *SmsProviderUpdateOne {
	_u.mutation.SetSecretID(v)
	return _u
}

// SetNillableSecretID sets the "secret_id" field if the given value is not nil.
func (_u *SmsProviderUpdateOne) SetNillableSecretID(v *string) *SmsProviderUpdateOne {
	if v != nil {
		_u.SetSecretID(*v)
	}
	return _u
}

// SetSecretKey sets the "secret_key" field.
func (_u *SmsProviderUpdateOne) SetSecretKey(v string) *SmsProviderUpdateOne {
	_u.mutation.SetSecretKey(v)
	return _u
}

// SetNillableSecretKey sets the "secret_key" field if the given value is not nil.
func (_u *SmsProviderUpdateOne) SetNillableSecretKey(v *string) *SmsProviderUpdateOne {
	if v != nil {
		_u.SetSecretKey(*v)
	}
	return _u
}

// SetRegion sets the "region" field.
func (_u *SmsProviderUpdateOne) SetRegion(v string) *SmsProviderUpdateOne {
	_u.mutation.SetRegion(v)
	return _u
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (_u *SmsProviderUpdateOne) SetNillableRegion(v *string) *SmsProviderUpdateOne {
	if v != nil {
		_u.SetRegion(*v)
	}
	return _u
}

// SetIsDefault sets the "is_default" field.
func (_u *SmsProviderUpdateOne) SetIsDefault(v bool) *SmsProviderUpdateOne {
	_u.mutation.SetIsDefault(v)
	return _u
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (_u *SmsProviderUpdateOne) SetNillableIsDefault(v *bool) *SmsProviderUpdateOne {
	if v != nil {
		_u.SetIsDefault(*v)
	}
	return _u
}

// Mutation returns the SmsProviderMutation object of the builder.
func (_u *SmsProviderUpdateOne) Mutation() *SmsProviderMutation {
	return _u.mutation
}

// Where appends a list predicates to the SmsProviderUpdate builder.
func (_u *SmsProviderUpdateOne) Where(ps ...predicate.SmsProvider) *SmsProviderUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *SmsProviderUpdateOne) Select(field string, fields ...string) *SmsProviderUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated SmsProvider entity.
func (_u *SmsProviderUpdateOne) Save(ctx context.Context) (*SmsProvider, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SmsProviderUpdateOne) SaveX(ctx context.Context) *SmsProvider {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *SmsProviderUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SmsProviderUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SmsProviderUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := smsprovider.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *SmsProviderUpdateOne) sqlSave(ctx context.Context) (_node *SmsProvider, err error) {
	_spec := sqlgraph.NewUpdateSpec(smsprovider.Table, smsprovider.Columns, sqlgraph.NewFieldSpec(smsprovider.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SmsProvider.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, smsprovider.FieldID)
		for _, f := range fields {
			if !smsprovider.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != smsprovider.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(smsprovider.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(smsprovider.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.SecretID(); ok {
		_spec.SetField(smsprovider.FieldSecretID, field.TypeString, value)
	}
	if value, ok := _u.mutation.SecretKey(); ok {
		_spec.SetField(smsprovider.FieldSecretKey, field.TypeString, value)
	}
	if value, ok := _u.mutation.Region(); ok {
		_spec.SetField(smsprovider.FieldRegion, field.TypeString, value)
	}
	if value, ok := _u.mutation.IsDefault(); ok {
		_spec.SetField(smsprovider.FieldIsDefault, field.TypeBool, value)
	}
	_node = &SmsProvider{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{smsprovider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
