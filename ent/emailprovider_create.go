// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/suyuan32/simple-admin-message-center/ent/emailprovider"
)

// EmailProviderCreate is the builder for creating a EmailProvider entity.
type EmailProviderCreate struct {
	config
	mutation *EmailProviderMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (_c *EmailProviderCreate) SetCreatedAt(v time.Time) *EmailProviderCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *EmailProviderCreate) SetNillableCreatedAt(v *time.Time) *EmailProviderCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *EmailProviderCreate) SetUpdatedAt(v time.Time) *EmailProviderCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *EmailProviderCreate) SetNillableUpdatedAt(v *time.Time) *EmailProviderCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *EmailProviderCreate) SetName(v string) *EmailProviderCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetAuthType sets the "auth_type" field.
func (_c *EmailProviderCreate) SetAuthType(v uint8) *EmailProviderCreate {
	_c.mutation.SetAuthType(v)
	return _c
}

// SetEmailAddr sets the "email_addr" field.
func (_c *EmailProviderCreate) SetEmailAddr(v string) *EmailProviderCreate {
	_c.mutation.SetEmailAddr(v)
	return _c
}

// SetPassword sets the "password" field.
func (_c *EmailProviderCreate) SetPassword(v string) *EmailProviderCreate {
	_c.mutation.SetPassword(v)
	return _c
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (_c *EmailProviderCreate) SetNillablePassword(v *string) *EmailProviderCreate {
	if v != nil {
		_c.SetPassword(*v)
	}
	return _c
}

// SetHostName sets the "host_name" field.
func (_c *EmailProviderCreate) SetHostName(v string) *EmailProviderCreate {
	_c.mutation.SetHostName(v)
	return _c
}

// SetIdentify sets the "identify" field.
func (_c *EmailProviderCreate) SetIdentify(v string) *EmailProviderCreate {
	_c.mutation.SetIdentify(v)
	return _c
}

// SetNillableIdentify sets the "identify" field if the given value is not nil.
func (_c *EmailProviderCreate) SetNillableIdentify(v *string) *EmailProviderCreate {
	if v != nil {
		_c.SetIdentify(*v)
	}
	return _c
}

// SetSecret sets the "secret" field.
func (_c *EmailProviderCreate) SetSecret(v string) *EmailProviderCreate {
	_c.mutation.SetSecret(v)
	return _c
}

// SetNillableSecret sets the "secret" field if the given value is not nil.
func (_c *EmailProviderCreate) SetNillableSecret(v *string) *EmailProviderCreate {
	if v != nil {
		_c.SetSecret(*v)
	}
	return _c
}

// SetPort sets the "port" field.
func (_c *EmailProviderCreate) SetPort(v uint32) *EmailProviderCreate {
	_c.mutation.SetPort(v)
	return _c
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (_c *EmailProviderCreate) SetNillablePort(v *uint32) *EmailProviderCreate {
	if v != nil {
		_c.SetPort(*v)
	}
	return _c
}

// SetTLS sets the "tls" field.
func (_c *EmailProviderCreate) SetTLS(v bool) *EmailProviderCreate {
	_c.mutation.SetTLS(v)
	return _c
}

// SetNillableTLS sets the "tls" field if the given value is not nil.
func (_c *EmailProviderCreate) SetNillableTLS(v *bool) *EmailProviderCreate {
	if v != nil {
		_c.SetTLS(*v)
	}
	return _c
}

// SetIsDefault sets the "is_default" field.
func (_c *EmailProviderCreate) SetIsDefault(v bool) *EmailProviderCreate {
	_c.mutation.SetIsDefault(v)
	return _c
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (_c *EmailProviderCreate) SetNillableIsDefault(v *bool) *EmailProviderCreate {
	if v != nil {
		_c.SetIsDefault(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *EmailProviderCreate) SetID(v uint64) *EmailProviderCreate {
	_c.mutation.SetID(v)
	return _c
}

// Mutation returns the EmailProviderMutation object of the builder.
func (_c *EmailProviderCreate) Mutation() *EmailProviderMutation {
	return _c.mutation
}

// Save creates the EmailProvider in the database.
func (_c *EmailProviderCreate) Save(ctx context.Context) (*EmailProvider, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *EmailProviderCreate) SaveX(ctx context.Context) *EmailProvider {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *EmailProviderCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *EmailProviderCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *EmailProviderCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := emailprovider.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := emailprovider.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.TLS(); !ok {
		v := emailprovider.DefaultTLS
		_c.mutation.SetTLS(v)
	}
	if _, ok := _c.mutation.IsDefault(); !ok {
		v := emailprovider.DefaultIsDefault
		_c.mutation.SetIsDefault(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *EmailProviderCreate) check() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "EmailProvider.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "EmailProvider.updated_at"`)}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "EmailProvider.name"`)}
	}
	if _, ok := _c.mutation.AuthType(); !ok {
		return &ValidationError{Name: "auth_type", err: errors.New(`ent: missing required field "EmailProvider.auth_type"`)}
	}
	if _, ok := _c.mutation.EmailAddr(); !ok {
		return &ValidationError{Name: "email_addr", err: errors.New(`ent: missing required field "EmailProvider.email_addr"`)}
	}
	if _, ok := _c.mutation.HostName(); !ok {
		return &ValidationError{Name: "host_name", err: errors.New(`ent: missing required field "EmailProvider.host_name"`)}
	}
	if _, ok := _c.mutation.TLS(); !ok {
		return &ValidationError{Name: "tls", err: errors.New(`ent: missing required field "EmailProvider.tls"`)}
	}
	if _, ok := _c.mutation.IsDefault(); !ok {
		return &ValidationError{Name: "is_default", err: errors.New(`ent: missing required field "EmailProvider.is_default"`)}
	}
	return nil
}

func (_c *EmailProviderCreate) sqlSave(ctx context.Context) (*EmailProvider, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *EmailProviderCreate) createSpec() (*EmailProvider, *sqlgraph.CreateSpec) {
	var (
		_node = &EmailProvider{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(emailprovider.Table, sqlgraph.NewFieldSpec(emailprovider.FieldID, field.TypeUint64))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(emailprovider.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(emailprovider.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(emailprovider.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.AuthType(); ok {
		_spec.SetField(emailprovider.FieldAuthType, field.TypeUint8, value)
		_node.AuthType = value
	}
	if value, ok := _c.mutation.EmailAddr(); ok {
		_spec.SetField(emailprovider.FieldEmailAddr, field.TypeString, value)
		_node.EmailAddr = value
	}
	if value, ok := _c.mutation.Password(); ok {
		_spec.SetField(emailprovider.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := _c.mutation.HostName(); ok {
		_spec.SetField(emailprovider.FieldHostName, field.TypeString, value)
		_node.HostName = value
	}
	if value, ok := _c.mutation.Identify(); ok {
		_spec.SetField(emailprovider.FieldIdentify, field.TypeString, value)
		_node.Identify = value
	}
	if value, ok := _c.mutation.Secret(); ok {
		_spec.SetField(emailprovider.FieldSecret, field.TypeString, value)
		_node.Secret = value
	}
	if value, ok := _c.mutation.Port(); ok {
		_spec.SetField(emailprovider.FieldPort, field.TypeUint32, value)
		_node.Port = value
	}
	if value, ok := _c.mutation.TLS(); ok {
		_spec.SetField(emailprovider.FieldTLS, field.TypeBool, value)
		_node.TLS = value
	}
	if value, ok := _c.mutation.IsDefault(); ok {
		_spec.SetField(emailprovider.FieldIsDefault, field.TypeBool, value)
		_node.IsDefault = value
	}
	return _node, _spec
}

// EmailProviderCreateBulk is the builder for creating many EmailProvider entities in bulk.
type EmailProviderCreateBulk struct {
	config
	err      error
	builders []*EmailProviderCreate
}

// Save creates the EmailProvider entities in the database.
func (_c *EmailProviderCreateBulk) Save(ctx context.Context) ([]*EmailProvider, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*EmailProvider, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EmailProviderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *EmailProviderCreateBulk) SaveX(ctx context.Context) []*EmailProvider {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *EmailProviderCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *EmailProviderCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
