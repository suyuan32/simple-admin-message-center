// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/suyuan32/simple-admin-message-center/ent/smslog"
)

// SMS Log Table | 短信日志表
type SmsLog struct {
	config `json:"-"`
	// ID of the ent.
	// UUID
	ID uuid.UUID `json:"id,omitempty"`
	// Create Time | 创建日期
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Update Time | 修改日期
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// The target phone number | 目标电话
	PhoneNumber string `json:"phone_number,omitempty"`
	// The content | 发送的内容
	Content string `json:"content,omitempty"`
	// The send status, 0 unknown 1 success 2 failed | 发送的状态, 0 未知， 1 成功， 2 失败
	SendStatus uint8 `json:"send_status,omitempty"`
	// The sms service provider | 短信服务提供商
	Provider     string `json:"provider,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SmsLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case smslog.FieldSendStatus:
			values[i] = new(sql.NullInt64)
		case smslog.FieldPhoneNumber, smslog.FieldContent, smslog.FieldProvider:
			values[i] = new(sql.NullString)
		case smslog.FieldCreatedAt, smslog.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case smslog.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SmsLog fields.
func (sl *SmsLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case smslog.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sl.ID = *value
			}
		case smslog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sl.CreatedAt = value.Time
			}
		case smslog.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sl.UpdatedAt = value.Time
			}
		case smslog.FieldPhoneNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone_number", values[i])
			} else if value.Valid {
				sl.PhoneNumber = value.String
			}
		case smslog.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				sl.Content = value.String
			}
		case smslog.FieldSendStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field send_status", values[i])
			} else if value.Valid {
				sl.SendStatus = uint8(value.Int64)
			}
		case smslog.FieldProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider", values[i])
			} else if value.Valid {
				sl.Provider = value.String
			}
		default:
			sl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SmsLog.
// This includes values selected through modifiers, order, etc.
func (sl *SmsLog) Value(name string) (ent.Value, error) {
	return sl.selectValues.Get(name)
}

// Update returns a builder for updating this SmsLog.
// Note that you need to call SmsLog.Unwrap() before calling this method if this SmsLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (sl *SmsLog) Update() *SmsLogUpdateOne {
	return NewSmsLogClient(sl.config).UpdateOne(sl)
}

// Unwrap unwraps the SmsLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sl *SmsLog) Unwrap() *SmsLog {
	_tx, ok := sl.config.driver.(*txDriver)
	if !ok {
		panic("ent: SmsLog is not a transactional entity")
	}
	sl.config.driver = _tx.drv
	return sl
}

// String implements the fmt.Stringer.
func (sl *SmsLog) String() string {
	var builder strings.Builder
	builder.WriteString("SmsLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sl.ID))
	builder.WriteString("created_at=")
	builder.WriteString(sl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sl.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("phone_number=")
	builder.WriteString(sl.PhoneNumber)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(sl.Content)
	builder.WriteString(", ")
	builder.WriteString("send_status=")
	builder.WriteString(fmt.Sprintf("%v", sl.SendStatus))
	builder.WriteString(", ")
	builder.WriteString("provider=")
	builder.WriteString(sl.Provider)
	builder.WriteByte(')')
	return builder.String()
}

// SmsLogs is a parsable slice of SmsLog.
type SmsLogs []*SmsLog
