// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/suyuan32/simple-admin-message-center/ent/predicate"
	"github.com/suyuan32/simple-admin-message-center/ent/smslog"
)

// SmsLogUpdate is the builder for updating SmsLog entities.
type SmsLogUpdate struct {
	config
	hooks    []Hook
	mutation *SmsLogMutation
}

// Where appends a list predicates to the SmsLogUpdate builder.
func (_u *SmsLogUpdate) Where(ps ...predicate.SmsLog) *SmsLogUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SmsLogUpdate) SetUpdatedAt(v time.Time) *SmsLogUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetPhoneNumber sets the "phone_number" field.
func (_u *SmsLogUpdate) SetPhoneNumber(v string) *SmsLogUpdate {
	_u.mutation.SetPhoneNumber(v)
	return _u
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (_u *SmsLogUpdate) SetNillablePhoneNumber(v *string) *SmsLogUpdate {
	if v != nil {
		_u.SetPhoneNumber(*v)
	}
	return _u
}

// SetContent sets the "content" field.
func (_u *SmsLogUpdate) SetContent(v string) *SmsLogUpdate {
	_u.mutation.SetContent(v)
	return _u
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (_u *SmsLogUpdate) SetNillableContent(v *string) *SmsLogUpdate {
	if v != nil {
		_u.SetContent(*v)
	}
	return _u
}

// SetSendStatus sets the "send_status" field.
func (_u *SmsLogUpdate) SetSendStatus(v uint8) *SmsLogUpdate {
	_u.mutation.ResetSendStatus()
	_u.mutation.SetSendStatus(v)
	return _u
}

// SetNillableSendStatus sets the "send_status" field if the given value is not nil.
func (_u *SmsLogUpdate) SetNillableSendStatus(v *uint8) *SmsLogUpdate {
	if v != nil {
		_u.SetSendStatus(*v)
	}
	return _u
}

// AddSendStatus adds value to the "send_status" field.
func (_u *SmsLogUpdate) AddSendStatus(v int8) *SmsLogUpdate {
	_u.mutation.AddSendStatus(v)
	return _u
}

// SetProvider sets the "provider" field.
func (_u *SmsLogUpdate) SetProvider(v string) *SmsLogUpdate {
	_u.mutation.SetProvider(v)
	return _u
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (_u *SmsLogUpdate) SetNillableProvider(v *string) *SmsLogUpdate {
	if v != nil {
		_u.SetProvider(*v)
	}
	return _u
}

// Mutation returns the SmsLogMutation object of the builder.
func (_u *SmsLogUpdate) Mutation() *SmsLogMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *SmsLogUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SmsLogUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *SmsLogUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SmsLogUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SmsLogUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := smslog.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *SmsLogUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(smslog.Table, smslog.Columns, sqlgraph.NewFieldSpec(smslog.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(smslog.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.PhoneNumber(); ok {
		_spec.SetField(smslog.FieldPhoneNumber, field.TypeString, value)
	}
	if value, ok := _u.mutation.Content(); ok {
		_spec.SetField(smslog.FieldContent, field.TypeString, value)
	}
	if value, ok := _u.mutation.SendStatus(); ok {
		_spec.SetField(smslog.FieldSendStatus, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedSendStatus(); ok {
		_spec.AddField(smslog.FieldSendStatus, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.Provider(); ok {
		_spec.SetField(smslog.FieldProvider, field.TypeString, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{smslog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// SmsLogUpdateOne is the builder for updating a single SmsLog entity.
type SmsLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SmsLogMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SmsLogUpdateOne) SetUpdatedAt(v time.Time) *SmsLogUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetPhoneNumber sets the "phone_number" field.
func (_u *SmsLogUpdateOne) SetPhoneNumber(v string) *SmsLogUpdateOne {
	_u.mutation.SetPhoneNumber(v)
	return _u
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (_u *SmsLogUpdateOne) SetNillablePhoneNumber(v *string) *SmsLogUpdateOne {
	if v != nil {
		_u.SetPhoneNumber(*v)
	}
	return _u
}

// SetContent sets the "content" field.
func (_u *SmsLogUpdateOne) SetContent(v string) *SmsLogUpdateOne {
	_u.mutation.SetContent(v)
	return _u
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (_u *SmsLogUpdateOne) SetNillableContent(v *string) *SmsLogUpdateOne {
	if v != nil {
		_u.SetContent(*v)
	}
	return _u
}

// SetSendStatus sets the "send_status" field.
func (_u *SmsLogUpdateOne) SetSendStatus(v uint8) *SmsLogUpdateOne {
	_u.mutation.ResetSendStatus()
	_u.mutation.SetSendStatus(v)
	return _u
}

// SetNillableSendStatus sets the "send_status" field if the given value is not nil.
func (_u *SmsLogUpdateOne) SetNillableSendStatus(v *uint8) *SmsLogUpdateOne {
	if v != nil {
		_u.SetSendStatus(*v)
	}
	return _u
}

// AddSendStatus adds value to the "send_status" field.
func (_u *SmsLogUpdateOne) AddSendStatus(v int8) *SmsLogUpdateOne {
	_u.mutation.AddSendStatus(v)
	return _u
}

// SetProvider sets the "provider" field.
func (_u *SmsLogUpdateOne) SetProvider(v string) *SmsLogUpdateOne {
	_u.mutation.SetProvider(v)
	return _u
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (_u *SmsLogUpdateOne) SetNillableProvider(v *string) *SmsLogUpdateOne {
	if v != nil {
		_u.SetProvider(*v)
	}
	return _u
}

// Mutation returns the SmsLogMutation object of the builder.
func (_u *SmsLogUpdateOne) Mutation() *SmsLogMutation {
	return _u.mutation
}

// Where appends a list predicates to the SmsLogUpdate builder.
func (_u *SmsLogUpdateOne) Where(ps ...predicate.SmsLog) *SmsLogUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *SmsLogUpdateOne) Select(field string, fields ...string) *SmsLogUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated SmsLog entity.
func (_u *SmsLogUpdateOne) Save(ctx context.Context) (*SmsLog, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SmsLogUpdateOne) SaveX(ctx context.Context) *SmsLog {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *SmsLogUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SmsLogUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SmsLogUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := smslog.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *SmsLogUpdateOne) sqlSave(ctx context.Context) (_node *SmsLog, err error) {
	_spec := sqlgraph.NewUpdateSpec(smslog.Table, smslog.Columns, sqlgraph.NewFieldSpec(smslog.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SmsLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, smslog.FieldID)
		for _, f := range fields {
			if !smslog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != smslog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(smslog.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.PhoneNumber(); ok {
		_spec.SetField(smslog.FieldPhoneNumber, field.TypeString, value)
	}
	if value, ok := _u.mutation.Content(); ok {
		_spec.SetField(smslog.FieldContent, field.TypeString, value)
	}
	if value, ok := _u.mutation.SendStatus(); ok {
		_spec.SetField(smslog.FieldSendStatus, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedSendStatus(); ok {
		_spec.AddField(smslog.FieldSendStatus, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.Provider(); ok {
		_spec.SetField(smslog.FieldProvider, field.TypeString, value)
	}
	_node = &SmsLog{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{smslog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
