syntax = "proto3";

package mcms;
option go_package = "./mcms";

message BaseIDResp {
  uint64 id = 1;
  string msg = 2;
}

message BaseResp {
  string msg = 1;
}

message BaseUUIDResp {
  string id = 1;
  string msg = 2;
}

message EmailInfo {
  repeated string target = 1;
  string subject = 2;
  string content = 3;
  optional string provider = 4;
}

message EmailLogInfo {
  optional string id = 1;
  optional int64 created_at = 2;
  optional int64 updated_at = 3;
  optional string target = 4;
  optional string subject = 5;
  optional string content = 6;
  optional uint32 send_status = 7;
  optional string provider = 8;
}

message EmailLogListReq {
  uint64 page = 1;
  uint64 page_size = 2;
  optional string target = 3;
  optional string subject = 4;
  optional string provider = 5;
  optional uint32 send_status = 6;
}

message EmailLogListResp {
  uint64 total = 1;
  repeated EmailLogInfo data = 2;
}

message EmailProviderInfo {
  optional uint64 id = 1;
  optional int64 created_at = 2;
  optional int64 updated_at = 3;
  optional string name = 4;
  optional uint32 auth_type = 5;
  optional string email_addr = 6;
  optional string password = 7;
  optional string host_name = 8;
  optional string identify = 9;
  optional string secret = 10;
  optional uint32 port = 11;
  optional bool tls = 12;
  optional bool is_default = 13;
}

message EmailProviderListReq {
  uint64 page = 1;
  uint64 page_size = 2;
  optional string name = 3;
  optional string email_addr = 4;
}

message EmailProviderListResp {
  uint64 total = 1;
  repeated EmailProviderInfo data = 2;
}

//  base message
message Empty {}

message IDReq {
  uint64 id = 1;
}

message IDsReq {
  repeated uint64 ids = 1;
}

message PageInfoReq {
  uint64 page = 1;
  uint64 page_size = 2;
}

message SmsInfo {
  repeated string phone_number = 1;
  repeated string params = 2;
  optional string template_id = 4;
  optional string app_id = 5;
  optional string sign_name = 6;
  optional string provider = 7;
}

message SmsLogInfo {
  optional string id = 1;
  optional int64 created_at = 2;
  optional int64 updated_at = 3;
  optional string phone_number = 4;
  optional string content = 5;
  optional uint32 send_status = 6;
  optional string provider = 7;
}

message SmsLogListReq {
  uint64 page = 1;
  uint64 page_size = 2;
  optional string phone_number = 3;
  optional string content = 4;
  optional string provider = 5;
  optional uint32 send_status = 6;
}

message SmsLogListResp {
  uint64 total = 1;
  repeated SmsLogInfo data = 2;
}

message SmsProviderInfo {
  optional uint64 id = 1;
  optional int64 created_at = 2;
  optional int64 updated_at = 3;
  optional string name = 4;
  optional string secret_id = 5;
  optional string secret_key = 6;
  optional string region = 7;
  optional bool is_default = 8;
}

message SmsProviderListReq {
  uint64 page = 1;
  uint64 page_size = 2;
  optional string name = 3;
}

message SmsProviderListResp {
  uint64 total = 1;
  repeated SmsProviderInfo data = 2;
}

message UUIDReq {
  string id = 1;
}

message UUIDsReq {
  repeated string ids = 1;
}

service Mcms {
  //  group: base
  rpc initDatabase(Empty) returns (BaseResp);
  //  group: email
  rpc sendEmail(EmailInfo) returns (BaseUUIDResp);
  //  EmailLog management
  //  group: emaillog
  rpc createEmailLog(EmailLogInfo) returns (BaseUUIDResp);
  //  group: emaillog
  rpc updateEmailLog(EmailLogInfo) returns (BaseResp);
  //  group: emaillog
  rpc getEmailLogList(EmailLogListReq) returns (EmailLogListResp);
  //  group: emaillog
  rpc getEmailLogById(UUIDReq) returns (EmailLogInfo);
  //  group: emaillog
  rpc deleteEmailLog(UUIDsReq) returns (BaseResp);
  //  EmailProvider management
  //  group: emailprovider
  rpc createEmailProvider(EmailProviderInfo) returns (BaseIDResp);
  //  group: emailprovider
  rpc updateEmailProvider(EmailProviderInfo) returns (BaseResp);
  //  group: emailprovider
  rpc getEmailProviderList(EmailProviderListReq) returns (EmailProviderListResp);
  //  group: emailprovider
  rpc getEmailProviderById(IDReq) returns (EmailProviderInfo);
  //  group: emailprovider
  rpc deleteEmailProvider(IDsReq) returns (BaseResp);
  //  group: sms
  rpc sendSms(SmsInfo) returns (BaseUUIDResp);
  //  SmsLog management
  //  group: smslog
  rpc createSmsLog(SmsLogInfo) returns (BaseUUIDResp);
  //  group: smslog
  rpc updateSmsLog(SmsLogInfo) returns (BaseResp);
  //  group: smslog
  rpc getSmsLogList(SmsLogListReq) returns (SmsLogListResp);
  //  group: smslog
  rpc getSmsLogById(UUIDReq) returns (SmsLogInfo);
  //  group: smslog
  rpc deleteSmsLog(UUIDsReq) returns (BaseResp);
  //  SmsProvider management
  //  group: smsprovider
  rpc createSmsProvider(SmsProviderInfo) returns (BaseIDResp);
  //  group: smsprovider
  rpc updateSmsProvider(SmsProviderInfo) returns (BaseResp);
  //  group: smsprovider
  rpc getSmsProviderList(SmsProviderListReq) returns (SmsProviderListResp);
  //  group: smsprovider
  rpc getSmsProviderById(IDReq) returns (SmsProviderInfo);
  //  group: smsprovider
  rpc deleteSmsProvider(IDsReq) returns (BaseResp);
}

